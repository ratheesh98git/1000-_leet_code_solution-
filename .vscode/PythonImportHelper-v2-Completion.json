[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.all_keep_practic",
        "description": "@0_leeet_code _probelem_solution.all_keep_practic",
        "peekOfCode": "def arr(arr,k):\n    k_largest=[-float(\"inf\")]*k\n    for i in range(len(arr)):\n        for j in range(k):\n            if arr[i]>k_largest[j]:\n                for l in range(k-1,)",
        "detail": "@0_leeet_code _probelem_solution.all_keep_practic",
        "documentation": {}
    },
    {
        "label": "find_second_largest",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_1",
        "description": "@0_leeet_code _probelem_solution.python_program_1",
        "peekOfCode": "def find_second_largest(arr):\n    # Check if the array has fewer than 2 elements\n    if len(arr)< 2:\n        return None\n    # Initialize variables to store the largest and second largest numbers\n    first_largest = second_largest = -3  # Using -3 as the initial value\n    # Iterate through the array\n    for num in arr:\n        if num > first_largest:\n            second_largest = first_largest",
        "detail": "@0_leeet_code _probelem_solution.python_program_1",
        "documentation": {}
    },
    {
        "label": "input_var",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_1",
        "description": "@0_leeet_code _probelem_solution.python_program_1",
        "peekOfCode": "input_var = [5, 10, 15, 2, 4, 6, 20, 16, 2, 16]\noutput = find_second_largest(input_var)\nprint(f'This is the output variable: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_1",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_1",
        "description": "@0_leeet_code _probelem_solution.python_program_1",
        "peekOfCode": "output = find_second_largest(input_var)\nprint(f'This is the output variable: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_1",
        "documentation": {}
    },
    {
        "label": "find_largest_number",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_2",
        "description": "@0_leeet_code _probelem_solution.python_program_2",
        "peekOfCode": "def find_largest_number(arr):\n    # Initialize a variable to store the largest number\n    length=len(arr)\n    max=arr[0]\n    min=arr[0]\n    # Iterate over the array to find the largest number\n    for i in range(0,length):\n        if arr[i]>max:\n           max=arr[i]\n    print(max)",
        "detail": "@0_leeet_code _probelem_solution.python_program_2",
        "documentation": {}
    },
    {
        "label": "input_var",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_2",
        "description": "@0_leeet_code _probelem_solution.python_program_2",
        "peekOfCode": "input_var = [5, 10, 15, 2, 4, 6, 20, 16, 2, 16]\noutput = find_largest_number(input_var)\nprint(f'This is the output variable: {max} ')",
        "detail": "@0_leeet_code _probelem_solution.python_program_2",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_2",
        "description": "@0_leeet_code _probelem_solution.python_program_2",
        "peekOfCode": "output = find_largest_number(input_var)\nprint(f'This is the output variable: {max} ')",
        "detail": "@0_leeet_code _probelem_solution.python_program_2",
        "documentation": {}
    },
    {
        "label": "find_top_k_largest",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_3",
        "description": "@0_leeet_code _probelem_solution.python_program_3",
        "peekOfCode": "def find_top_k_largest(arr, k):\n    # Initialize a list to store the k largest numbers found so far\n    k_largest = [-float('inf')] * k\n    # Iterate over the array\n    for i in range(len(arr)):\n        # Compare the current element with elements in k_largest\n        for j in range(k):\n            if arr[i] > k_largest[j]:\n                # Shift elements in k_largest to the right\n                for l in range(k-1, j, -1):",
        "detail": "@0_leeet_code _probelem_solution.python_program_3",
        "documentation": {}
    },
    {
        "label": "input_var",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_3",
        "description": "@0_leeet_code _probelem_solution.python_program_3",
        "peekOfCode": "input_var = [5, 10, 15, 2, 4, 6, 20, 16, 2, 16]\nk = 6 # Change this value to find the top k largest elements\noutput = find_top_k_largest(input_var, k)\nprint(f'The top {k} largest elements are: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_3",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_3",
        "description": "@0_leeet_code _probelem_solution.python_program_3",
        "peekOfCode": "k = 6 # Change this value to find the top k largest elements\noutput = find_top_k_largest(input_var, k)\nprint(f'The top {k} largest elements are: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_3",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_3",
        "description": "@0_leeet_code _probelem_solution.python_program_3",
        "peekOfCode": "output = find_top_k_largest(input_var, k)\nprint(f'The top {k} largest elements are: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_3",
        "documentation": {}
    },
    {
        "label": "find_top_k_largest",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_4",
        "description": "@0_leeet_code _probelem_solution.python_program_4",
        "peekOfCode": "def find_top_k_largest(arr, k):\n    # Use a set to remove duplicates\n    unique_elements = {}\n    unique_list = []\n    # Add unique elements to the list manually\n    for i in range(len(arr)):\n        if arr[i] not in unique_elements:\n            unique_elements[arr[i]] = True\n            unique_list.append(arr[i])\n    # Sort the unique list manually (simple bubble sort for illustration)",
        "detail": "@0_leeet_code _probelem_solution.python_program_4",
        "documentation": {}
    },
    {
        "label": "input_var",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_4",
        "description": "@0_leeet_code _probelem_solution.python_program_4",
        "peekOfCode": "input_var = [5, 10, 15, 2, 4, 6, 20, 16, 2, 16]\nk = 6  # Change this value to find the top k largest elements\noutput = find_top_k_largest(input_var, k)\nprint(f'The top {k} largest unique elements are: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_4",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_4",
        "description": "@0_leeet_code _probelem_solution.python_program_4",
        "peekOfCode": "k = 6  # Change this value to find the top k largest elements\noutput = find_top_k_largest(input_var, k)\nprint(f'The top {k} largest unique elements are: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_4",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_4",
        "description": "@0_leeet_code _probelem_solution.python_program_4",
        "peekOfCode": "output = find_top_k_largest(input_var, k)\nprint(f'The top {k} largest unique elements are: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_4",
        "documentation": {}
    },
    {
        "label": "find_kth_largest",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_5",
        "description": "@0_leeet_code _probelem_solution.python_program_5",
        "peekOfCode": "def find_kth_largest(arr, k):\n    # Use a set to remove duplicates\n    unique_elements = {}\n    unique_list = []\n    # Add unique elements to the list manually\n    for i in range(len(arr)):\n        if arr[i] not in unique_elements:\n            unique_elements[arr[i]] = True\n            unique_list.append(arr[i])\n    # Sort the unique list manually (simple bubble sort for illustration)",
        "detail": "@0_leeet_code _probelem_solution.python_program_5",
        "documentation": {}
    },
    {
        "label": "input_var",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_5",
        "description": "@0_leeet_code _probelem_solution.python_program_5",
        "peekOfCode": "input_var = [5, 10, 15, 2, 4, 6, 20, 16, 2, 16]\nk = 1  # Change this value to find the k-th largest element\noutput = find_kth_largest(input_var, k)\nprint(f'The {k}-th largest unique element is: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_5",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_5",
        "description": "@0_leeet_code _probelem_solution.python_program_5",
        "peekOfCode": "k = 1  # Change this value to find the k-th largest element\noutput = find_kth_largest(input_var, k)\nprint(f'The {k}-th largest unique element is: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_5",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_5",
        "description": "@0_leeet_code _probelem_solution.python_program_5",
        "peekOfCode": "output = find_kth_largest(input_var, k)\nprint(f'The {k}-th largest unique element is: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_5",
        "documentation": {}
    },
    {
        "label": "are_anagrams",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_8",
        "description": "@0_leeet_code _probelem_solution.python_program_8",
        "peekOfCode": "def are_anagrams(s1, s2):\n    # Check if the lengths of the two strings are the same\n    if len(s1) != len(s2):\n        return False\n    # Initialize dictionaries to store character counts\n    count1 = {}\n    count2 = {}\n    # Count the characters in s1\n    for char in s1:\n        if char in count1:",
        "detail": "@0_leeet_code _probelem_solution.python_program_8",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_8",
        "description": "@0_leeet_code _probelem_solution.python_program_8",
        "peekOfCode": "s1 = \"listen\"\ns2 = \"silent\"\nif are_anagrams(s1, s2):\n    print(\"it's anagram\")\nelse:\n    print(\"no\")",
        "detail": "@0_leeet_code _probelem_solution.python_program_8",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_8",
        "description": "@0_leeet_code _probelem_solution.python_program_8",
        "peekOfCode": "s2 = \"silent\"\nif are_anagrams(s1, s2):\n    print(\"it's anagram\")\nelse:\n    print(\"no\")",
        "detail": "@0_leeet_code _probelem_solution.python_program_8",
        "documentation": {}
    }
]