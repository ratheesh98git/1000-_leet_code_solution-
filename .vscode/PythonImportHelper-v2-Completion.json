[
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.all_keep_practic",
        "description": "@0_leeet_code _probelem_solution.all_keep_practic",
        "peekOfCode": "def arr(arr,k):\n    k_largest=[-float(\"inf\")]*k\n    for i in range(len(arr)):\n        for j in range(k):\n            if arr[i]>k_largest[j]:\n                for l in range(k-1,)",
        "detail": "@0_leeet_code _probelem_solution.all_keep_practic",
        "documentation": {}
    },
    {
        "label": "find_second_largest",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_1",
        "description": "@0_leeet_code _probelem_solution.python_program_1",
        "peekOfCode": "def find_second_largest(arr):\n    # Check if the array has fewer than 2 elements\n    if len(arr)< 2:\n        return None\n    # Initialize variables to store the largest and second largest numbers\n    first_largest = second_largest = -3  # Using -3 as the initial value\n    # Iterate through the array\n    for num in arr:\n        if num > first_largest:\n            second_largest = first_largest",
        "detail": "@0_leeet_code _probelem_solution.python_program_1",
        "documentation": {}
    },
    {
        "label": "input_var",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_1",
        "description": "@0_leeet_code _probelem_solution.python_program_1",
        "peekOfCode": "input_var = [5, 10, 15, 2, 4, 6, 20, 16, 2, 16]\noutput = find_second_largest(input_var)\nprint(f'This is the output variable: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_1",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_1",
        "description": "@0_leeet_code _probelem_solution.python_program_1",
        "peekOfCode": "output = find_second_largest(input_var)\nprint(f'This is the output variable: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_1",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_10",
        "description": "@0_leeet_code _probelem_solution.python_program_10",
        "peekOfCode": "def count(s):\n    var=\"aeiou\"\n    return sum(1 for char in s   if char in var)\nprint(count(\"ratheesh\"))",
        "detail": "@0_leeet_code _probelem_solution.python_program_10",
        "documentation": {}
    },
    {
        "label": "fib_onic",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_11",
        "description": "@0_leeet_code _probelem_solution.python_program_11",
        "peekOfCode": "def fib_onic(n):\n    if n==0:\n        return 1\n    else:\n        return n*fib_onic(n-1)\nd=fib_onic(5)\nprint(\"this is fibonaic\",d)",
        "detail": "@0_leeet_code _probelem_solution.python_program_11",
        "documentation": {}
    },
    {
        "label": "fibo",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_12",
        "description": "@0_leeet_code _probelem_solution.python_program_12",
        "peekOfCode": "def fibo(var):\n    fib=[0,1]\n    for  item in range(2,var):\n       fib.append(fib[-1]+fib[-2])\n    return  fib[:var]\nprint(fibo(7))",
        "detail": "@0_leeet_code _probelem_solution.python_program_12",
        "documentation": {}
    },
    {
        "label": "remove_duplicate",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_13",
        "description": "@0_leeet_code _probelem_solution.python_program_13",
        "peekOfCode": "def remove_duplicate(nums):\n    is_nums=[]\n    for items in nums:\n        is_dupicate=False\n        for  fin in is_nums:\n         if items==fin:\n            is_dupicate= True\n            break\n        if not is_dupicate:\n           is_nums.append(items)",
        "detail": "@0_leeet_code _probelem_solution.python_program_13",
        "documentation": {}
    },
    {
        "label": "merge_sorted_list",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_14",
        "description": "@0_leeet_code _probelem_solution.python_program_14",
        "peekOfCode": "def merge_sorted_list(list1,list2):\n    sorted_array=[]\n    i=j=0\n    while i<len(list1) and j<len(list2):\n        if list1[i]<=list2[j]:\n            sorted_array.append(list1[i])\n            i+=1\n        else:\n            sorted_array.append(list2[j])\n            j+=1",
        "detail": "@0_leeet_code _probelem_solution.python_program_14",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  gcd(a,b):\n    while b!=0:\n        remainder=a%b\n        a=b\n        b=remainder\n    return a\nprint(gcd(48,18))"
        },
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_15",
        "description": "@0_leeet_code _probelem_solution.python_program_15",
        "peekOfCode": "def  gcd(a,b):\n    while b!=0:\n        remainder=a%b\n        a=b\n        b=remainder\n    return a\nprint(gcd(48,18))",
        "detail": "@0_leeet_code _probelem_solution.python_program_15",
        "documentation": {}
    },
    {
        "label": "find_missing_number",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_16",
        "description": "@0_leeet_code _probelem_solution.python_program_16",
        "peekOfCode": "def find_missing_number(nums):\n    n=len(nums)+1\n    exceped=n*(n+1)//2\n    actual=0\n    for items in nums:\n        actual+=items\n    return exceped-actual\nprint(find_missing_number([1,2,3,4,5,6,7,8,10]))",
        "detail": "@0_leeet_code _probelem_solution.python_program_16",
        "documentation": {}
    },
    {
        "label": "flatten",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_17",
        "description": "@0_leeet_code _probelem_solution.python_program_17",
        "peekOfCode": "def flatten(flatte):\n    flatten_list=[]\n    for nums in flatte:\n        if isinstance(nums,list):\n            flatten_list.extend(flatten(nums))\n        else:\n            flatten_list.append(nums)\n    return flatten_list\nprint(flatten([3,2,[1,2]]))",
        "detail": "@0_leeet_code _probelem_solution.python_program_17",
        "documentation": {}
    },
    {
        "label": "find_largest_number",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_2",
        "description": "@0_leeet_code _probelem_solution.python_program_2",
        "peekOfCode": "def find_largest_number(arr):\n    # Initialize a variable to store the largest number\n    length=len(arr)\n    max=arr[0]\n    min=arr[0]\n    # Iterate over the array to find the largest number\n    for i in range(0,length):\n        if arr[i]>max:\n           max=arr[i]\n    print(max)",
        "detail": "@0_leeet_code _probelem_solution.python_program_2",
        "documentation": {}
    },
    {
        "label": "input_var",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_2",
        "description": "@0_leeet_code _probelem_solution.python_program_2",
        "peekOfCode": "input_var = [5, 10, 15, 2, 4, 6, 20, 16, 2, 16]\noutput = find_largest_number(input_var)\nprint(f'This is the output variable: {max} ')",
        "detail": "@0_leeet_code _probelem_solution.python_program_2",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_2",
        "description": "@0_leeet_code _probelem_solution.python_program_2",
        "peekOfCode": "output = find_largest_number(input_var)\nprint(f'This is the output variable: {max} ')",
        "detail": "@0_leeet_code _probelem_solution.python_program_2",
        "documentation": {}
    },
    {
        "label": "linear_search",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_24",
        "description": "@0_leeet_code _probelem_solution.python_program_24",
        "peekOfCode": "def linear_search(values,target):\n    lent=len(values)\n    for i in range(0,lent):\n        if values[i]==target:\n            return i\n    return -1\nindex=linear_search([1,2,100,4,5,10,12,10],13)\nprint(f\"this is index {index}\")",
        "detail": "@0_leeet_code _probelem_solution.python_program_24",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_27",
        "description": "@0_leeet_code _probelem_solution.python_program_27",
        "peekOfCode": "user = input(\"Enter the string: \")\n# String to store the result\nnew_string = \"\"\n# Tuple of vowels to check against\nvowels = (\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n# Iterate over each character in the input string\nfor char in user:\n    # Check if the character is not a vowel\n    if char not in vowels:\n        # Append the character to the new string if it's not a vowel",
        "detail": "@0_leeet_code _probelem_solution.python_program_27",
        "documentation": {}
    },
    {
        "label": "new_string",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_27",
        "description": "@0_leeet_code _probelem_solution.python_program_27",
        "peekOfCode": "new_string = \"\"\n# Tuple of vowels to check against\nvowels = (\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n# Iterate over each character in the input string\nfor char in user:\n    # Check if the character is not a vowel\n    if char not in vowels:\n        # Append the character to the new string if it's not a vowel\n        new_string += char\n# Print the result",
        "detail": "@0_leeet_code _probelem_solution.python_program_27",
        "documentation": {}
    },
    {
        "label": "vowels",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_27",
        "description": "@0_leeet_code _probelem_solution.python_program_27",
        "peekOfCode": "vowels = (\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\")\n# Iterate over each character in the input string\nfor char in user:\n    # Check if the character is not a vowel\n    if char not in vowels:\n        # Append the character to the new string if it's not a vowel\n        new_string += char\n# Print the result\nprint(\"String without vowels:\", new_string)",
        "detail": "@0_leeet_code _probelem_solution.python_program_27",
        "documentation": {}
    },
    {
        "label": "find_top_k_largest",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_3",
        "description": "@0_leeet_code _probelem_solution.python_program_3",
        "peekOfCode": "def find_top_k_largest(arr, k):\n    # Initialize a list to store the k largest numbers found so far\n    k_largest = [-float('inf')] * k\n    # Iterate over the array\n    for i in range(len(arr)):\n        # Compare the current element with elements in k_largest\n        for j in range(k):\n            if arr[i] > k_largest[j]:\n                # Shift elements in k_largest to the right\n                for l in range(k-1, j, -1):",
        "detail": "@0_leeet_code _probelem_solution.python_program_3",
        "documentation": {}
    },
    {
        "label": "input_var",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_3",
        "description": "@0_leeet_code _probelem_solution.python_program_3",
        "peekOfCode": "input_var = [5, 10, 15, 2, 4, 6, 20, 16, 2, 16]\nk = 6 # Change this value to find the top k largest elements\noutput = find_top_k_largest(input_var, k)\nprint(f'The top {k} largest elements are: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_3",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_3",
        "description": "@0_leeet_code _probelem_solution.python_program_3",
        "peekOfCode": "k = 6 # Change this value to find the top k largest elements\noutput = find_top_k_largest(input_var, k)\nprint(f'The top {k} largest elements are: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_3",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_3",
        "description": "@0_leeet_code _probelem_solution.python_program_3",
        "peekOfCode": "output = find_top_k_largest(input_var, k)\nprint(f'The top {k} largest elements are: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_3",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_34",
        "description": "@0_leeet_code _probelem_solution.python_program_34",
        "peekOfCode": "def array(arr):\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]>arr[j]:    #for discending order <\n                arr[i],arr[j]=arr[j],arr[i]\n    return arr\ns=[1,210,5,3,2,0]\narray(s)\nprint(s[-1])",
        "detail": "@0_leeet_code _probelem_solution.python_program_34",
        "documentation": {}
    },
    {
        "label": "find_second_largest",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_35",
        "description": "@0_leeet_code _probelem_solution.python_program_35",
        "peekOfCode": "def find_second_largest(arr):\n    # Check if the array has fewer than 2 elements\n    # If it does, return None because we can't find a second-largest element\n    if len(arr) < 2:\n        return None\n    # Initialize the largest element with the first element of the array\n    largest = arr[0]\n    # Initialize second_largest as None because we haven't found it yet\n    second_largest = None\n    # First loop: Traverse the array to find the largest element",
        "detail": "@0_leeet_code _probelem_solution.python_program_35",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_35",
        "description": "@0_leeet_code _probelem_solution.python_program_35",
        "peekOfCode": "s = [1, 210, 5, 3, 2, 0]\n# Call the function to find the second-largest element\nsecond_largest = find_second_largest(s)\n# Print the result\nprint(\"Second Largest Element:\", second_largest)",
        "detail": "@0_leeet_code _probelem_solution.python_program_35",
        "documentation": {}
    },
    {
        "label": "second_largest",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_35",
        "description": "@0_leeet_code _probelem_solution.python_program_35",
        "peekOfCode": "second_largest = find_second_largest(s)\n# Print the result\nprint(\"Second Largest Element:\", second_largest)",
        "detail": "@0_leeet_code _probelem_solution.python_program_35",
        "documentation": {}
    },
    {
        "label": "find_top_k_largest",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_4",
        "description": "@0_leeet_code _probelem_solution.python_program_4",
        "peekOfCode": "def find_top_k_largest(arr, k):\n    # Use a set to remove duplicates\n    unique_elements = {}\n    unique_list = []\n    # Add unique elements to the list manually\n    for i in range(len(arr)):\n        if arr[i] not in unique_elements:\n            unique_elements[arr[i]] = True\n            unique_list.append(arr[i])\n    # Sort the unique list manually (simple bubble sort for illustration)",
        "detail": "@0_leeet_code _probelem_solution.python_program_4",
        "documentation": {}
    },
    {
        "label": "input_var",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_4",
        "description": "@0_leeet_code _probelem_solution.python_program_4",
        "peekOfCode": "input_var = [5, 10, 15, 2, 4, 6, 20, 16, 2, 16]\nk = 6  # Change this value to find the top k largest elements\noutput = find_top_k_largest(input_var, k)\nprint(f'The top {k} largest unique elements are: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_4",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_4",
        "description": "@0_leeet_code _probelem_solution.python_program_4",
        "peekOfCode": "k = 6  # Change this value to find the top k largest elements\noutput = find_top_k_largest(input_var, k)\nprint(f'The top {k} largest unique elements are: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_4",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_4",
        "description": "@0_leeet_code _probelem_solution.python_program_4",
        "peekOfCode": "output = find_top_k_largest(input_var, k)\nprint(f'The top {k} largest unique elements are: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_4",
        "documentation": {}
    },
    {
        "label": "find_kth_largest",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_5",
        "description": "@0_leeet_code _probelem_solution.python_program_5",
        "peekOfCode": "def find_kth_largest(arr, k):\n    # Use a set to remove duplicates\n    unique_elements = {}\n    unique_list = []\n    # Add unique elements to the list manually\n    for i in range(len(arr)):\n        if arr[i] not in unique_elements:\n            unique_elements[arr[i]] = True\n            unique_list.append(arr[i])\n    # Sort the unique list manually (simple bubble sort for illustration)",
        "detail": "@0_leeet_code _probelem_solution.python_program_5",
        "documentation": {}
    },
    {
        "label": "input_var",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_5",
        "description": "@0_leeet_code _probelem_solution.python_program_5",
        "peekOfCode": "input_var = [5, 10, 15, 2, 4, 6, 20, 16, 2, 16]\nk = 1  # Change this value to find the k-th largest element\noutput = find_kth_largest(input_var, k)\nprint(f'The {k}-th largest unique element is: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_5",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_5",
        "description": "@0_leeet_code _probelem_solution.python_program_5",
        "peekOfCode": "k = 1  # Change this value to find the k-th largest element\noutput = find_kth_largest(input_var, k)\nprint(f'The {k}-th largest unique element is: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_5",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_5",
        "description": "@0_leeet_code _probelem_solution.python_program_5",
        "peekOfCode": "output = find_kth_largest(input_var, k)\nprint(f'The {k}-th largest unique element is: {output}')",
        "detail": "@0_leeet_code _probelem_solution.python_program_5",
        "documentation": {}
    },
    {
        "label": "are_anagrams",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_8",
        "description": "@0_leeet_code _probelem_solution.python_program_8",
        "peekOfCode": "def are_anagrams(s1, s2):\n    # Check if the lengths of the two strings are the same\n    if len(s1) != len(s2):\n        return False\n    # Initialize dictionaries to store character counts\n    count1 = {}\n    count2 = {}\n    # Count the characters in s1\n    for char in s1:\n        if char in count1:",
        "detail": "@0_leeet_code _probelem_solution.python_program_8",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_8",
        "description": "@0_leeet_code _probelem_solution.python_program_8",
        "peekOfCode": "s1 = \"listen\"\ns2 = \"silent\"\nif are_anagrams(s1, s2):\n    print(\"it's anagram\")\nelse:\n    print(\"no\")",
        "detail": "@0_leeet_code _probelem_solution.python_program_8",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "@0_leeet_code _probelem_solution.python_program_8",
        "description": "@0_leeet_code _probelem_solution.python_program_8",
        "peekOfCode": "s2 = \"silent\"\nif are_anagrams(s1, s2):\n    print(\"it's anagram\")\nelse:\n    print(\"no\")",
        "detail": "@0_leeet_code _probelem_solution.python_program_8",
        "documentation": {}
    },
    {
        "label": "pal",
        "kind": 2,
        "importPath": "@0_leeet_code _probelem_solution.python_program_9",
        "description": "@0_leeet_code _probelem_solution.python_program_9",
        "peekOfCode": "def pal(s1):\n    return s1==s1[::-1]\nprint(pal(\"radar\"))",
        "detail": "@0_leeet_code _probelem_solution.python_program_9",
        "documentation": {}
    }
]